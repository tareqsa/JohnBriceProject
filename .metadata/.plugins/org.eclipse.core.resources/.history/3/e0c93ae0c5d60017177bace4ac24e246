package facades;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;

import javaBeans.ClientType;
import javaBeans.Company;
import javaBeans.Customer;
import dao.CompanyDBDAO;
import dao.CouponDBDAO;
import dao.CustomerDBDAO;
import exceptions.CompanyExceptionHandler;
import exceptions.CustomerExceptionHandler;
import exceptions.DuplicateEntryException;
import exceptions.NullConnectionException;

/**
 * 
 * The AdminFacade class is used only by the Admin of the couponsystem. 
 * He has the access to create, remove and update the different users of the couponsystem.
 *
 */
public class AdminFacade implements CouponClientFacade
{

	private CompanyDBDAO compdbdao;
	private CouponDBDAO coupdbdao;
	private CustomerDBDAO customerdbdao;
	ArrayList<Company> companies_array = new ArrayList<>();
	ArrayList<Customer> customers_array = new ArrayList<>();


	/**
	 * the AdminFacade constructor - it initialize all the DBDAOs
	 */
	public AdminFacade()
	{
		this.compdbdao = new CompanyDBDAO();
		this.coupdbdao = new CouponDBDAO();
		this.customerdbdao = new CustomerDBDAO();

	}

	/**
	 * Receives a company instance and register it in the database
	 * @param company a company instance
	 */
	public void createCompany(Company company)
	{
		try
		{
			compdbdao.createCompany(company);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | DuplicateEntryException | NullConnectionException e)
		{
			CompanyExceptionHandler.companyExceptionHandler(e);
		}

	}

	/**
	 * Receives a company instance and removes its entries from the database
	 * @param company a company instance
	 */
	public void removeCompany(Company company)
	{	
		try
		{
			compdbdao.removeCompany(company);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException | EmptyEntryException  e)
		{
			CompanyExceptionHandler.companyExceptionHandler(e);
		}

	}

	/**
	 * Receives a company instance and update its entries in the database
	 * @param company a company instance
	 */
	public void updateCompany(Company company)
	{	
		try
		{
			compdbdao.updateCompany(company);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException e)
		{
			CompanyExceptionHandler.companyExceptionHandler(e);
		}

	}

	/**
	 * Returns an ArrayList of all the companys in the database
	 * @return an ArrayList of all the companys in the database
	 */
	public Collection<Company> getAllCompanies()
	{
		try
		{
			companies_array = (ArrayList<Company>) compdbdao.getAllCompanies();
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException | ParseException e)
		{
			CompanyExceptionHandler.companyExceptionHandler(e);
		}

		return companies_array;

	}

	/**
	 * Receives an id of a company and returns an instance of that company from the database
	 * @param id a company's id
	 * @return an instance of that company from the database
	 */
	public Company getCompany(long id)
	{
		Company comp = new Company();

		try
		{
			comp = compdbdao.getCompany((int)id);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException | ParseException e)
		{
			CompanyExceptionHandler.companyExceptionHandler(e);
		}

		return comp;

	}

	/**
	 * Receives a customer instance and register it in the database
	 * @param customer a customer instance
	 */
	public void createCustomer(Customer customer)
	{
		try
		{
			customerdbdao.createCustomer(customer);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | DuplicateEntryException | NullConnectionException e)
		{
			CustomerExceptionHandler.customerExceptionHandle(e);

		}

	}

	/**
	 * Receives a customer instance and removes its entries from the database
	 * @param customer a customer instance
	 */
	public void removeCustomer(Customer customer)
	{
		try
		{
			customerdbdao.removeCustomer(customer);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException e)
		{
			CustomerExceptionHandler.customerExceptionHandle(e);
		}

	}

	/**
	 * Receives a customer instance and updates its entries in the database
	 * @param customer a customer instance
	 */
	public void updateCustomer(Customer customer)
	{
		try
		{
			customerdbdao.updateCustomer(customer);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException e)
		{
			CustomerExceptionHandler.customerExceptionHandle(e);
		}

	}

	/**
	 * returns an ArrayList of all the customers in the database
	 * @return an ArrayList of all the customers in the database
	 */
	public Collection<Customer> getAllCustomer()
	{
		customers_array = null;

		try
		{
			customers_array = (ArrayList<Customer>) customerdbdao.getAllCustomer();
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException e) 
		{
			CustomerExceptionHandler.customerExceptionHandle(e);	
		}

		return customers_array;
	}

	/**
	 * Receives a customer is and returns an instance of that customer from the database
	 * @param id a customer id
	 * @return an instance of that customer from the database
	 */
	public Customer getCustomer(long id)
	{
		Customer cust = new Customer();

		try
		{
			cust = customerdbdao.getCustomer((int)id);
		}
		catch (ClassNotFoundException | InterruptedException | SQLException | NullConnectionException e)
		{
			CustomerExceptionHandler.customerExceptionHandle(e);
		}

		return cust;

	}

	/**
	 * checking the database for an entry of an admin client type with the matching name and password
	 * returns true if it found one' returns false if there is no matching entry
	 */
	@Override
	public CouponClientFacade login(String name, String password, ClientType clientType)
	{
		if (name.equals("admin") && password.equals("1234"))
		{
			return this;
		}

		return null;
	}
}
