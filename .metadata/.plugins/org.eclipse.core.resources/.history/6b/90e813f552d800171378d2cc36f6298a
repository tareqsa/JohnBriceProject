package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

import allSqlQueriesAndDateConv.CouponSqlQueries;
import allSqlQueriesAndDateConv.CustomerSqlQueries;
import allSqlQueriesAndDateConv.DateConverter;
import conPool.ConnectionPool;
import exceptions.DuplicateCouponTypeException;
import exceptions.DuplicateEntryException;
import exceptions.EmptyEntryException;
import exceptions.NullConnectionException;
import exceptions.UnAvailableCouponException;
import exceptions.WrongDataInputException;
import javaBeans.Coupon;
import javaBeans.CouponType;
import javaBeans.Customer;

// TODO: Auto-generated Javadoc
/**
 * The Class CustomerDBDAO.
 */
public class CustomerDBDAO implements CustomerDAO 
{
	
	/** The pool. */
	private ConnectionPool pool;

	/** The coupons array. */
	ArrayList<Coupon> coupons_array = new ArrayList<>();
	
	/** The customers array. */
	ArrayList<Customer> customers_array = new ArrayList<>();
	
	/** The customer user id. */
	private long customer_user_id;


	/**
	 * Gets the customer user id.
	 *
	 * @return the customer user id
	 */
	public long getCustomer_user_id()
	{
		return customer_user_id;
	}

	/**
	 * Sets the customer user id.
	 *
	 * @param customer_user_id the new customer user id
	 */
	public void setCustomer_user_id(long customer_user_id) 
	{
		this.customer_user_id = customer_user_id;
	}


	/**
	 * Instantiates a new customer DBDAO.
	 */
	public CustomerDBDAO() 
	{
		pool = ConnectionPool.getInstance();
	}
	
	//=====================================================Create customer==========================================================

	/**
	 * Receives a customer instance and register it in the database
	 */
	@Override
	public void createCustomer(Customer cust) throws ClassNotFoundException, InterruptedException, SQLException, DuplicateEntryException, NullConnectionException
	{

		Connection con2 = pool.getConnection();
		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CustomerSqlQueries.customers_by_name_and_password, cust.getCustName(), cust.getPassword()));
		if(rs.next())
		{
			throw new DuplicateEntryException("the admin tried to create a customer with a name and password that already exist in the database");
		}
		else
		{
			String insert_to_customer_query = CustomerSqlQueries.insert_into_customer;
			PreparedStatement prst = con2.prepareStatement(insert_to_customer_query);
			prst.setString(1, cust.getCustName());
			prst.setString(2, cust.getPassword());
			prst.execute();
			System.out.println("Customer created Successfully:) ");
		}
		pool.returnConnection(con2);

	}

	//=====================================================Remove customer==========================================================

	/**
	 * Receives a customer instance and removes it's entries from the database
	 */
	@Override
	public void removeCustomer(Customer cust)  throws ClassNotFoundException, InterruptedException, SQLException, NullConnectionException, EmptyEntryException
	{
		Connection con2 = pool.getConnection();


		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CustomerSqlQueries.customers_by_cust_name, cust.getCustName()));
		if(rs.next())
		{
			stt.execute(String.format(CustomerSqlQueries.customers_by_cust_name, cust.getCustName()));
			stt.execute(String.format(CustomerSqlQueries.delete_customer_coupon_by_cust_id, cust.getId()));	
			System.out.println("Customer has been removed!!");
		}
		else
		{
			pool.returnConnection(con2);
			throw new EmptyEntryException("Trying to remove un existed customer!");
		}
		pool.returnConnection(con2);

	}

	//=====================================================Update customer==========================================================

	/**
	 * Receives a customer instance and update its entries in the database
	 */
	@Override
	public void updateCustomer(Customer cust) throws ClassNotFoundException, InterruptedException, SQLException, NullConnectionException, EmptyEntryException
	{
		Connection con2 = pool.getConnection();
		String update_customer_query = CustomerSqlQueries.update_customer_by_id;

		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CustomerSqlQueries.customers_by_cust_name, cust.getCustName()));
		if(rs.next())
		{
			PreparedStatement prpst = con2.prepareStatement(update_customer_query);
			prpst.setString(1, cust.getPassword());
			prpst.setLong(2, cust.getId());
			prpst.executeUpdate();
			System.out.println("customer " + cust.getCustName() + " has been updated");

		}
		else
		{
			pool.returnConnection(con2);
			throw new EmptyEntryException("Trying to update un existed customer!");
		}
	}

	//======================================================Get customer============================================================

	/**
	 * Receives an id of a customer and returns an instance of the desired customer from the database
	 */
	@Override
	public Customer getCustomer(int id) throws ClassNotFoundException, InterruptedException, SQLException, NullConnectionException
	{

		Customer customer = new Customer();
		Connection con2 = pool.getConnection();
		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CustomerSqlQueries.customers_by_id, id));
		if(rs.next())
		{
			customer.setId(rs.getLong("ID"));
			customer.setCustName(rs.getString("CUST_NAME"));
			customer.setPassword(rs.getString("PASSWORD"));
		}
		pool.returnConnection(con2);
		return customer;
	}

	//====================================================Get all customers=========================================================

	/**
	 * returns an ArrayList of all the customers in the database
	 */
	@Override
	public Collection<Customer> getAllCustomer() throws ClassNotFoundException, InterruptedException, SQLException, NullConnectionException
	{
		customers_array.removeAll(customers_array);
		Connection con2 = pool.getConnection();

		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CustomerSqlQueries.all_customers));
		while(rs.next())
		{
			Customer customer = new Customer();
			customer.setId(rs.getLong("ID"));
			customer.setCustName(rs.getString("CUST_NAME"));
			customer.setPassword(rs.getString("PASSWORD"));

			customers_array.add(customer);
		}
		pool.returnConnection(con2);
		return customers_array;
	}

	//=======================================================Get coupons============================================================

	/**
	 * returns an ArrayList of all the coupons purchased by the current customer from the database
	 */
	@Override
	public Collection<Coupon> getCoupons() throws ClassNotFoundException, InterruptedException, SQLException, ParseException, NullConnectionException
	{
		coupons_array.removeAll(coupons_array);
		ArrayList<Long> coupon_id = new ArrayList<>();
		Connection con2 = pool.getConnection();
		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CouponSqlQueries.coupon_id_by_cust_id, this.getCustomer_user_id()));
		while(rs.next())
		{
			coupon_id.add(rs.getLong("COUPON_ID"));
		}
		for(int i=0 ; i<coupon_id.size() ; i++ )
		{
			Statement stt1 = con2.createStatement();
			ResultSet rs1;
			rs1 = stt1.executeQuery(String.format(CouponSqlQueries.coupons_by_id, coupon_id.get(i)));
			if(rs1.next())
			{
				Coupon coupon = new Coupon();
				coupon.setId(rs1.getLong("ID"));
				coupon.setTitle(rs1.getString("TITLE"));
				coupon.setStartDate(DateConverter.stringToDate(rs1.getString("START_DATE")));
				coupon.setEndDate(DateConverter.stringToDate(rs1.getString("END_DATE")));
				coupon.setAmount(rs1.getInt("AMOUNT"));
				coupon.setType(CouponType.valueOf(rs1.getString("TYPE")));
				coupon.setMessage(rs1.getString("MESSAGE"));
				coupon.setPrice(rs1.getDouble("PRICE"));
				coupon.setImage(rs1.getString("IMAGE"));
				coupons_array.add(coupon);

			}
		}
		pool.returnConnection(con2);
		return coupons_array;
	}

	//==========================================================Login===============================================================

	/**
	 * checks the database for a customer with the given name and the given password
	 */
	@Override
	public boolean login(String custName, String password) throws ClassNotFoundException, InterruptedException, SQLException, WrongDataInputException, NullConnectionException
	{
		Connection con2 = pool.getConnection();
		Statement stt = con2.createStatement();
		ResultSet rs;
		rs  = stt.executeQuery(String.format(CustomerSqlQueries.customers_by_name_and_password, custName, password));
		if(rs.next())
		{
			this.setCustomer_user_id(rs.getLong("ID"));
			pool.returnConnection(con2);
			return true;
		}
		else 
		{
			pool.returnConnection(con2);
			throw new WrongDataInputException("The user tried to login using the customer name " + custName + " and the password " + password);

		}
	}

	//======================================================Valid coupon============================================================
	/**
	 * Valid coupon.
	 *
	 * @param coupon the coupon
	 * @return true, if successful
	 * @throws SQLException the SQL exception
	 * @throws ParseException the parse exception
	 * @throws UnAvailableCouponException the un available coupon exception
	 * @throws NullConnectionException the null connection exception
	 */
	public boolean validCoupon(Coupon coupon) throws SQLException, ParseException, UnAvailableCouponException, NullConnectionException
	{
		Connection con2 = pool.getConnection();
		Date today = Calendar.getInstance().getTime();
		Date valid_date = null;
		int available_amount = 0;
		Statement stmt = (Statement) con2.createStatement();		
		ResultSet check_availability;
		check_availability = stmt.executeQuery(String.format(CouponSqlQueries.amount_and_end_date_by_id, coupon.getId() ));
		if (check_availability.next())
		{
			available_amount = check_availability.getInt("AMOUNT");
			valid_date = (Date) DateConverter.stringToDate(check_availability.getString("END_DATE"));
			if( available_amount>0 && today.before(valid_date) )
			{
				pool.returnConnection(con2);
				return true;
			}

		}
		else
		{
			pool.returnConnection(con2);
			throw new UnAvailableCouponException("Customer " + this.getCustomer_user_id() + " tried to purchse a coupon that is"
					+ " either out of date or it's available amount is 0");
		}
		return false;
	}

	//===================================================Validate coupon type=======================================================
	/**
	 * Validate coupon type.
	 *
	 * @param coupon the coupon
	 * @return true, if successful
	 * @throws SQLException the SQL exception
	 * @throws DuplicateCouponTypeException the duplicate coupon type exception
	 * @throws NullConnectionException the null connection exception
	 */
	public boolean validateCouponType(Coupon coupon) throws SQLException, DuplicateCouponTypeException, NullConnectionException
	{
		ArrayList<Long> coupon_id = new ArrayList<>();
		ArrayList<CouponType> coupon_type = new ArrayList<>();
		Connection con2 = pool.getConnection();

		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CouponSqlQueries.coupon_id_by_cust_id, this.getCustomer_user_id() ));
		while(rs.next())
		{
			coupon_id.add(rs.getLong("COUPON_ID"));
		}
		for (int i=0;i<coupon_id.size();i++)
		{
			ResultSet rs1;
			Statement stt1 = con2.createStatement();
			rs1 = stt1.executeQuery(String.format(CouponSqlQueries.coupon_type_by_id, coupon_id.get(i) ));
			while(rs1.next())
			{
				coupon_type.add(CouponType.valueOf(rs.getString("TYPE")));
			}
		}
		for (int i=0;i<coupon_type.size();i++)
		{
			if(coupon_type.get(i) == coupon.getType())
			{
				pool.returnConnection(con2);
				ConnectionPool.getInstance().returnConnection(con2);
				throw new DuplicateCouponTypeException("Customer " + this.getCustomer_user_id() + " tried to purchse a coupon of a type that he already has");
			}
		}
		pool.returnConnection(con2);
		return true;

	}

	//=====================================================Purchase coupon==========================================================
	/**
	 * Purchase coupon.
	 *
	 * @param coupon the coupon
	 * @throws ClassNotFoundException the class not found exception
	 * @throws InterruptedException the interrupted exception
	 * @throws SQLException the SQL exception
	 * @throws ParseException the parse exception
	 * @throws DuplicateCouponTypeException the duplicate coupon type exception
	 * @throws UnAvailableCouponException the un available coupon exception
	 * @throws NullConnectionException the null connection exception
	 */
	public void purchaseCoupon(Coupon coupon) throws ClassNotFoundException, InterruptedException, SQLException, ParseException, DuplicateCouponTypeException, UnAvailableCouponException, NullConnectionException
	{
		boolean can_purchase = false;
		can_purchase = this.validCoupon(coupon);
		can_purchase = this.validateCouponType(coupon);
		Connection con2 = pool.getConnection();

		if (can_purchase==true)
		{
			String update_query = CouponSqlQueries.update_coupon_amount;
			PreparedStatement prpst = (PreparedStatement) con2.prepareStatement(update_query);
			prpst.setInt(1, (coupon.getAmount()-1));
			prpst.setLong(2, coupon.getId());
			prpst.executeUpdate();

			String insert_query = CustomerSqlQueries.insert_customer_coupon;	  
			PreparedStatement preparedStmt = (PreparedStatement) con2.prepareStatement(insert_query);
			preparedStmt.setLong (1, this.getCustomer_user_id());
			preparedStmt.setLong (2, coupon.getId());

			preparedStmt.execute();     

			pool.returnConnection(con2);
			System.out.println("Coupon has been purchased successfully");
		}
		else
		{
			System.out.println("Cannot purchase coupon " + coupon.getTitle());
		}



	}

	//============================================Get all purchased coupons by type=================================================
	/**
	 * Gets the all purchased coupons by type.
	 *
	 * @param coupontype the coupontype
	 * @return the all purchased coupons by type
	 * @throws ClassNotFoundException the class not found exception
	 * @throws InterruptedException the interrupted exception
	 * @throws SQLException the SQL exception
	 * @throws ParseException the parse exception
	 * @throws NullConnectionException the null connection exception
	 */
	public ArrayList<Coupon> getAllPurchasedCouponsByType(CouponType coupontype) throws ClassNotFoundException, InterruptedException, SQLException, ParseException, NullConnectionException
	{
		ArrayList<Long> coupon_id = new ArrayList<>();
		coupons_array.removeAll(coupons_array);
		Connection con2 = pool.getConnection();

		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CouponSqlQueries.coupon_id_by_cust_id, this.getCustomer_user_id() ));
		while (rs.next())
		{
			coupon_id.add(rs.getLong("COUPON_ID"));
		}

		for (int i=0;i<coupon_id.size();i++)
		{
			ResultSet rs1;	
			Statement stt1 = con2.createStatement();
			rs1 = stt1.executeQuery(String.format(CouponSqlQueries.coupons_by_type_and_id, coupontype.toString(), coupon_id.get(i) ));
			if (rs1.next())
			{
				Coupon coupon = new Coupon();
				coupon.setId(rs1.getLong("ID"));
				coupon.setTitle(rs1.getString("TITLE"));
				coupon.setStartDate(DateConverter.stringToDate(rs1.getString("START_DATE")));
				coupon.setEndDate(DateConverter.stringToDate(rs1.getString("END_DATE")));
				coupon.setAmount(rs1.getInt("AMOUNT"));
				coupon.setType(CouponType.valueOf(rs1.getString("TYPE").trim()));
				coupon.setMessage(rs1.getString("MESSAGE"));
				coupon.setPrice(rs1.getDouble("PRICE"));
				coupon.setImage(rs1.getString("IMAGE"));
				coupons_array.add(coupon);

			}
		}
		pool.returnConnection(con2);
		return coupons_array;

	}

	//======================================================Get all purchase coupon by price===========================================================
	/**
	 * Gets the all purchased coupons by price.
	 *
	 * @param price the price
	 * @return the all purchased coupons by price
	 * @throws ClassNotFoundException the class not found exception
	 * @throws InterruptedException the interrupted exception
	 * @throws SQLException the SQL exception
	 * @throws ParseException the parse exception
	 * @throws NullConnectionException the null connection exception
	 */
	public ArrayList<Coupon> getAllPurchasedCouponsByPrice(double price) throws ClassNotFoundException, InterruptedException, SQLException, ParseException, NullConnectionException
	{
		ArrayList<Long> coupon_id = new ArrayList<>();
		coupons_array.removeAll(coupons_array);	
		Connection con2 = pool.getConnection();

		Statement stt = con2.createStatement();
		ResultSet rs;
		rs = stt.executeQuery(String.format(CouponSqlQueries.coupon_id_by_cust_id, this.getCustomer_user_id() ));
		while (rs.next())
		{
			coupon_id.add(rs.getLong("COUPON_ID"));					
		} 
		for (int i=0;i<coupon_id.size();i++)
		{
			ResultSet rs1;					
			rs1 = stt.executeQuery(String.format(CouponSqlQueries.coupons_by_price_and_id, price, coupon_id.get(i) ));
			while (rs1.next())
			{
				Coupon coupon = new Coupon();
				coupon.setId(rs1.getLong("ID"));
				coupon.setTitle(rs1.getString("TITLE"));
				coupon.setStartDate(DateConverter.stringToDate(rs1.getString("START_DATE")));
				coupon.setEndDate(DateConverter.stringToDate(rs1.getString("END_DATE")));
				coupon.setAmount(rs1.getInt("AMOUNT"));
				coupon.setType(CouponType.valueOf(rs1.getString("TYPE").trim()));
				coupon.setMessage(rs1.getString("MESSAGE"));
				coupon.setPrice(rs1.getDouble("PRICE"));
				coupon.setImage(rs1.getString("IMAGE"));       
				coupons_array.add(coupon);

			}
		}
		pool.returnConnection(con2);
		return coupons_array;


	}
	
}
